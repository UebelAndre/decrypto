[package]
name = "decrypto"
version = "0.1.0"
authors = ["Andre Brisco <andre.brisco@gmail.com>"]
edition = "2018"

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[[bin]]
name = "decrypto_wasm"
path = "src/main.rs"

[features]
default = ["console_error_panic_hook"]

[dependencies]
wasm-bindgen = "=0.2.48"  # Must match the same version used in `rules_rust`

# The `console_error_panic_hook` crate provides better debugging of panics by
# logging them with `console.error`. This is great for development, but requires
# all the `std::fmt` and `std::panicking` infrastructure, so isn't great for
# code size when deploying.
console_error_panic_hook = { version = "0.1.6", optional = true }

# `wee_alloc` is a tiny allocator for wasm that is only ~1K in code size
# compared to the default allocator's ~10K. It is slower than the default
# allocator, however.
#
# Unfortunately, `wee_alloc` requires nightly Rust when targeting wasm for now.
wee_alloc = { version = "0.4.5", optional = true }

[profile.release]
# Tell `rustc` to optimize for small code size.
opt-level = "s"

[raze]
workspace_path = "//rust/cargo"
genmode = "Remote"
output_buildfile_suffix = "BUILD.bazel"
# The target must match a dependencies section above
target = "wasm32-unknown-unknown"
# gen_workspace_prefix = "decrypto_raze"
incompatible_relative_workspace_path = true

[raze.crates.proc-macro2.'0.4.30']
additional_flags = [
    "--cfg=u128",
    "--cfg=use_proc_macro",
    "--cfg=wrap_proc_macro",
]

[raze.crates.unicase.'1.4.2']
additional_flags = [
  "--cfg=__unicase__iter_cmp",
  "--cfg=__unicase__defauler_hasher",
]

[raze.crates.syn.'0.15.43']
gen_buildrs = true
additional_flags = [
  "--cfg=syn_can_call_macro_by_path",
  "--cfg=visit",
]
